package com.mygdx.main.page_stuff;

import java.util.ArrayList;
import java.util.List;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class PageManager {
	
	public static List<Page> pages = new ArrayList<Page>();
	public static Page topPage, endPage;
	public static Page currentPage;
	public static int currentIndex;
	public static boolean end = false;
	public static List<String> inputs = new ArrayList<String>();
	
	public PageManager() {
		populatePages();
		setPage(0);
	}
	
	private void populatePages() {
		List<String> answers = new ArrayList<String>();
		topPage = new Page("",  answers);
		topPage.top = true;
		
		answers = new ArrayList<String>();
		endPage = new Page("",  answers);
		endPage.end = true;
		
		answers = new ArrayList<String>();
		answers.add("Male");
		answers.add("Female");
		Page p = new Page("What is your sex?", answers);
		pages.add(p);
		
		answers = new ArrayList<String>();
		answers.add("White");
		answers.add("Black");
		answers.add("Asian");
		answers.add("Hispanic");
		p = new Page("What is your race?", answers);
		pages.add(p);		

		answers = new ArrayList<String>();
		answers.add("Management");
		answers = new ArrayList<String>();
		answers.add("White");
		answers.add("Black");
		answers.add("Asian");
		answers.add("Hispanic");
		p = new Page("What is your race?", answers);
		pages.add(p);		

		answers.add("Business");
		answers.add("Computers & Math");
		answers.add("Engineers");
		answers.add("Science");
		answers.add("Law");
		answers.add("Others (To Next Page)");
		p = new Page("Future occupation?", answers);
		pages.add(p);
	}
	
	public void setPage(int i) {
		currentIndex = i;
		currentPage = pages.get(currentIndex);
		currentPage.populateButtons();
	}
	
	public static void nextPage() {
		currentIndex++;
		if (currentIndex >= pages.size()) {
			end = true;
			FileHandle file = Gdx.files.local("inputs/inputs.txt");
			String text = "";
			for (String input: inputs) {
				text += input + "\n";
			}
			file.writeString(text, false);				
		} else {			
			currentPage = pages.get(currentIndex);
			currentPage.populateButtons();
		}
	}
	
	public void update() {
		if (end) {
			endPage.update();
		} else {			
			topPage.update();
			currentPage.update();
		}
	}
	
	public void draw(SpriteBatch sb) {
		if (end) {
			endPage.draw(sb);
		} else {			
			currentPage.draw(sb);
			topPage.draw(sb);
		}
	}
}
